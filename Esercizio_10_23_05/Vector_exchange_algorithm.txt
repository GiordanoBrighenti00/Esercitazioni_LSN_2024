#include "mpi.h"
#include <iostream>
#include <armadillo>

using namespace std;
using namespace arma;

int main(int argc, char* argv[]) {
    MPI_Init(&argc, &argv);

    int size, rank;
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);

    int rank_exch_1 = 3;
    int rank_exch_2 = 4;

    if (size < 2) {
        cerr << "This program requires at least 2 MPI processes." << endl;
        MPI_Abort(MPI_COMM_WORLD, 1);
    }

    // Inizializzazione del vettore V
    rowvec V(size, fill::zeros);

    for(int k=0; k<150; k++){
        
        for(int i = 0; i < size; i++) {
            V[i] = V[i] + rank + i;
        }

        int vec_size = V.n_elem;
        double* vec_data = V.memptr();
        int tag = 0;

        // Buffer temporaneo per ricevere i dati
        rowvec V_temp(size, fill::zeros);
        double* vec_data_temp = V_temp.memptr();

        if(k%10 == 0){
            if (rank == rank_exch_1) {
                // Invio il vettore da rank 1 a rank 0
                MPI_Send(vec_data, vec_size, MPI_DOUBLE, rank_exch_2, tag, MPI_COMM_WORLD);
                MPI_Recv(vec_data_temp, vec_size, MPI_DOUBLE, rank_exch_2, tag, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
            } else if (rank == rank_exch_2) {
                // Ricevo il vettore da rank 1 a rank 0
                MPI_Recv(vec_data_temp, vec_size, MPI_DOUBLE, rank_exch_1, tag, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
                MPI_Send(vec_data, vec_size, MPI_DOUBLE, rank_exch_1, tag, MPI_COMM_WORLD);
            }

            // Aggiorna il vettore V con i dati ricevuti
            if(rank == rank_exch_2 || rank == rank_exch_1){
                V = V_temp;
            }

            // Stampa il vettore V associato al rank indicato
            if(rank == 4){
                cout << "[";
                for(int j  = 0; j < size; j++){
                    cout << V[j] << " ";
                }
                cout << "]" << endl;
            }
            
        }
        

    }
    
    

    MPI_Finalize();
    return 0;
}